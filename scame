#!/usr/bin/env python
# -*- coding: utf-8; -*-

# Copyright (C) 2014  Nicolas Lamirault <nicolas.lamirault@gmail.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

"""
Install Scame.
"""

import argparse
import os
from os import path
import subprocess
import sys


HOME = path.expanduser('~')
EMACS_DIRECTORY = path.join(HOME, '.emacs.d')
SCAME_HOME = path.join(HOME, '.scame')
SCAME_DIRECTORY = path.join(SCAME_HOME, 'lisp')
EVM_HOME = '/usr/local/evm'

CASK_EXECUTABLE = path.join(HOME, '.cask/bin/cask')
EVM_EXECUTABLE = path.join(HOME, '.evm/bin/evm')

SCAME_REPOSITORY = 'https://github.com/nlamirault/scame.git'
EVM_REPOSITORY = 'https://raw.github.com/rejeep/evm/master/go'
CASK_REPOSITORY = 'https://raw.github.com/cask/cask/master/go'

OKGREEN = '\033[32m'
FAIL = '\033[31m'
ENDC = '\033[0m'


def success(message):
    """Print MESSAGE with a green color."""
    print(OKGREEN + message + ENDC)


def fail(message):
    """Print MESSAGE with a red color."""
    print(FAIL + message + ENDC)


def scame_clone():
    """Download Scame from git repository."""
    success("Download Scame for Emacs.")
    subprocess.check_call(['git', 'clone', SCAME_REPOSITORY, SCAME_HOME])


def scame_install():
    """Launch Scame installation using Cask."""
    success("Install Scame.")
    if not path.isdir(path.join(HOME, '.cask')):
        cask_install()
    os.chdir(SCAME_HOME)
    # check_call doens't find emacs executable installed by EVM. So we use 'os'
    os.system("%s install" % CASK_EXECUTABLE)
    os.chdir(HOME)


def cask_install():
    """Download Cask and install it."""
    success("Install Cask")
    subprocess.check_call(['curl', '-fsSkL', CASK_REPOSITORY,
                           '-o', '/tmp/cask.py'])
    subprocess.check_call(['python', '/tmp/cask.py'])


def evm_install(emacs_version):
    """Download Emacs Version Manager from git repository."""
    success("Install Emacs Version Manager. Setup for %s" % emacs_version)
    if not path.isdir(path.join(HOME, EVM_HOME)):
        subprocess.check_call(['sudo', 'mkdir', EVM_HOME])
        subprocess.check_call(['sudo', 'chown', os.environ['USER'],
                               EVM_HOME])
        subprocess.check_call(['curl', '-fsSkL', EVM_REPOSITORY,
                               '-o', '/tmp/evm.sh'])
        subprocess.check_call(['bash', '/tmp/evm.sh'])
    if not path.isdir(path.join(HOME, EVM_HOME, emacs_version)):
        subprocess.check_call([EVM_EXECUTABLE, 'install', emacs_version])
    subprocess.check_call([EVM_EXECUTABLE, 'use', emacs_version])


def scame_destroy():
    """Cleanup Scame, Cask and EVM installations."""
    #response = raw_input("Fresh installation ? [y/n]")
    #if response == "y":
    success("Delete directories used by Scame, Cask and EVM.")
    for name in ['.emacs.d', '.cask', '.evm']:
        subprocess.check_call(['rm', '-fr', path.join(HOME, name)])
    subprocess.check_call(['sudo', 'rm', '-fr', EVM_HOME])


# def get_emacs_executable():
#     """Retrieve Emacs executable."""
#     return "cask exec emacs"


def exec_scame_command(command_name):
    """Execute Scame command with Emacs CLI."""
    #emacs = get_emacs_executable()
    #cli = path.join(SCAME_HOME, 'scame-cli.el')
    #cli = path.join(path.dirname(path.realpath(__file__)), 'scame-cli.el')
    cli = 'scame-cli.el'
    command = ['cask', 'exec', 'emacs', '-Q', '--script',
               cli,
               '--', command_name]
    #print(command)
    # os.system("%s exec emacs -Q --script %s -- %s" %
    #           (CASK_EXECUTABLE, cli, command_name))
    os.execvp(command[0], command)


def main(args):
    """Main function. """
    #print args
    try:
        emacs_version = 'emacs-24.3'  # emacs-git-snapshot'
        if args.emacs:
            emacs_version = args.emacs

        if args.init:
            scame_clone()
            evm_install(emacs_version)
            scame_install()
            success("""Scame installed.""")
            success("""Add scame binary to your $PATH: """)
            success("""export PATH=$PATH:%s""" % SCAME_HOME)
        elif args.cmd:
            # if args.cmd == 'update':
            #     os.chdir(EMACS_DIRECTORY)
            #     exec_scame_command(args.cmd)
            #     os.chdir(HOME)
            # else:
            if not path.isdir(path.join(SCAME_HOME, '.cask')):
                scame_install()
            os.chdir(SCAME_HOME)
            exec_scame_command(args.cmd)
            os.chdir(HOME)

    except Exception as error:
        fail('{0!s}'.format(error))
        sys.exit(1)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='scame',
                                     description='An Emacs installation tool.',
                                     usage='%(prog)s [options]')
    parser.add_argument('--init', action='store_true',
                        help="Initialize Scame")
    parser.add_argument('--cmd',
                        help="Scame CLI commands")
    parser.add_argument('--emacs',
                        help="Specify the version of Emacs to install")
    sys.exit(main(parser.parse_args()))
